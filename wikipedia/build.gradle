apply plugin: 'com.android.application'
apply from: '../config/quality.gradle'

def versionStart = '2.0'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'
    defaultConfig {
        applicationId 'org.wikipedia'
        minSdkVersion 10
        targetSdkVersion 21
        versionCode 93
        testApplicationId "org.wikipedia.test"
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        dev {
            versionName "${versionStart}-dev-${date}"
        }
        prod {
            versionName "${versionStart}-r-${date}"
        }
        releasesprod {
            versionName "${versionStart}-releasesprod-${date}"
        }
        alpha {
            versionName "${versionStart}-alpha-${date}"
            applicationId 'org.wikipedia.alpha'
        }
        beta {
            versionName "${versionStart}-beta-${date}"
            applicationId 'org.wikipedia.beta'
        }
        amazon {
            versionName "${versionStart}-amazon-${date}"
        }
        custom {
            versionName "${versionStart}-${customChannel}-${date}"
            applicationId getProperty('customApplicationId')
            // next line is for injecting a custom channel value into the custom/AndroidManifest.xml
            manifestPlaceholders = [customChannel:getProperty('customChannel').toString()]
        }
    }
    sourceSets {
        // Still using old Maven archetype based directory structure and
        // not the new standard Gradle one
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        androidTest {
            java.srcDirs = ['../wikipedia-it/src/main/java']
            res.srcDirs = ['../wikipedia-it/res']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    // while we still have lint errors; remove once those are fixed
    lintOptions {
        warning 'MissingTranslation'
    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

dependencies {
    // To keep the Maven Central dependencies up-to-date
    // use http://gradleplease.appspot.com/ or http://search.maven.org/.
    // Debug with ./gradlew -q wikipedia:dependencies --configuration compile

    compile 'com.android.support:appcompat-v7:21.0.3' // includes support-v4
    compile('org.mediawiki.api:json:1.3.0') {
        exclude group: 'org.json', module: 'json'
    }
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.1.0'
    compile 'com.squareup.okhttp:okhttp:2.1.0'
    compile 'com.squareup:otto:1.3.5'
    compile 'com.squareup.picasso:picasso:2.4.0'
    compile 'com.mobsandgeeks:android-saripaar:1.0.3'
    compile 'com.nineoldandroids:library:2.4.0'
    compile('ch.acra:acra:4.5.0') {
        exclude group: 'org.json', module: 'json'
    }
    compile 'de.keyboardsurfer.android.widget:crouton:1.8.5@aar'
    compile 'com.github.chrisbanes.photoview:library:1.2.3'
}

// The next block is for setting the release signing config from a file outside the git repo
// To make release builds work:
// Copy the signing.properties.sample file to ~/.sign/signing.properties and adjust the values.
def Properties props = new Properties()
def propFile = new File(System.getProperty("user.home"), '.sign/signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        System.err.println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    System.err.println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
